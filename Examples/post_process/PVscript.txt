# trace generated using paraview version 5.9.0

#### import the simple module from the paraview
import os
import csv
from paraview.simple import *

nameFoam = 'test.foam'
folderPathFoam = os.getcwd()
pathFileFoam = os.path.join(folderPathFoam, nameFoam)


saveDir = os.path.join(os.getcwd(), 'data')
outFileName = 'dataOutput2.csv'
savePath = saveDir+outFileName


#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()

# create a new 'OpenFOAMReader'
resfoam = OpenFOAMReader(registrationName='res.foam', FileName=pathFileFoam)
resfoam.MeshRegions = ['internalMesh']

# Properties modified on resfoam
resfoam.CaseType = 'Decomposed Case'

# get active view
renderView1 = GetActiveViewOrCreate('RenderView')

# get animation scene
animationScene1 = GetAnimationScene()

# update animation scene based on data timesteps
animationScene1.UpdateAnimationUsingDataTimeSteps()

# create a new 'Slice'
slice1 = Slice(registrationName='Slice1', Input=resfoam)
slice1.SliceType = 'Plane'
slice1.HyperTreeGridSlicer = 'Plane'
slice1.SliceOffsetValues = [0.0]

# init the 'Plane' selected for 'SliceType'
slice1.SliceType.Origin = [0.1, 0.0, 0.0]

animationScene1.GoToLast()

# update the view to ensure updated data information
renderView1.Update()

# create a new 'Integrate Variables'
integrateVariables1 = IntegrateVariables(registrationName='IntegrateVariables1', Input=slice1)
renderView1.Update()




dataServer = servermanager.Fetch(programmableFilter1)
    numCells = dataServer.GetNumberOfCells()
    data = []
    for key in keys:
        for x in range(numCells):
            data.append(dataServer.GetCellData().GetArray(key).GetValue(x))

    if os.path.exists(savePath) == False:
        with open(savePath, 'w') as csvfile:
            filewriter = csv.writer(csvfile, delimiter=',')
            filewriter.writerow(keys)
    with open(savePath, 'a') as csvfile:
        filewriter = csv.writer(csvfile, lineterminator='\n')
        filewriter.writerow(data)
